# Stickman Warfare - Development To-Do List



This file outlines an extensive roadmap for the project, divided into clear phases with numbered tasks.  

The game is designed as a **2D browser-based JavaScript project with no backend** (frontend-only).  

The final build will be compacted into a **single self-contained HTML file** using build tools.



---



## Phase 0: Tech Setup

0.1 [x] Choose a core JavaScript game framework (custom Canvas 2D loop selected).  

0.2 [x] Set up project structure with HTML/JS/CSS (index.html + styles.css + src/main.js).  

0.3 [x] Configure build tools (Webpack + html-webpack-plugin setup).  

0.4 [x] Implement bundling pipeline to export **a single self-contained HTML file** (post-build inline script outputs dist/stickman-warfare.html).  

0.5 [x] Implement basic browser rendering (canvas scene with animated stickman).  

0.6 [x] Test initial input handling (keyboard movement + jump).  

0.7 [x] Set up local server for development and live testing (webpack-dev-server via `npm run dev` on port 5173).  



---



## Phase 1: Core Foundations

1. [x] Define core gameplay loop (combat, movement, progression) (documented in docs/core_gameplay_loop.md).  

2. [x] Implement basic stickman character model (**2D confirmed design**) (pose states for stand/crouch/roll rendered on canvas).  

3. [x] Develop core movement system (run, jump, crouch, roll) with responsive input buffering and roll cooldown.  

4. [x] Create basic melee combat mechanics (light attack combo with three-step timing window).  

5. [x] Add basic health, damage, and death system (player hitboxes + training dummy respawn + enemy hits to player).  

6. [x] Integrate simple ragdoll physics (player/enemy ragdoll pieces with timed fade).  

7. [x] Implement debug arena for testing core mechanics (multi-platform collision playground).  



---



## Phase 2: Weapons & Gear

8. [x] Design modular weapon system (equippable slots with weapon definitions).  

9. [x] Add melee weapons (swords, bats, axes). (Shock Baton melee chain added alongside Combat Fists.)  

10. [x] Add ranged weapons: pistols, SMGs, rifles, sniper rifles (basic pistol projectile prototype).  

11. [x] Add throwable explosives (grenades, C4, flashbangs, smoke) (frag, flashbang, and smoke prototypes with cooldowns, HUD states, crowd-control, and lingering fields).  

12. [x] Implement gadgets (jetpacks, grappling hooks, deployable turrets). (Turret sentry, grappling rig, and shield bubble wired into the shared gadget pipeline with HUD feedback and mitigation logic.)  

13. [x] Build ammo and reloading system (stateful mags/reloads with HUD cues + debug polish hooks).  

14. [x] Add recoil, spread, and projectile physics. (Striker Pistol now uses recoil kick + spread bloom with HUD feedback and decay.)  



---



## Phase 3: Vehicles & Support

15. [x] Implement basic vehicle framework (enter/exit, control switching). (Player can now mount/dismount with E, with dedicated vehicle control loop.)  

16. [x] Add land vehicles (cars, tanks, mechs). (Recon Buggy prototype available for testing in the arena.)  

17. [x] Add air vehicles (helicopters, fighter jets, drones). (Helicopter, fighter, and drone mounts hovering with vertical controls.)  

18. [x] Add water vehicles (boats, submarines). (Tide Skiff, Storm Barge, and Abyss Sub with buoyant controls and HUD hints.)  

19. [x] Create mounted weapons (machine guns, rocket pods, flamethrowers). (Driver-controlled turrets added: barge chaingun, helicopter nose cannon, jet rocket pods, and skiff prow cannon.)  

20. [x] Implement supply drop system (ammo, medkits, heavy weapons). (Timed airdrops deliver ammo caches, medkits, and the Thunder Cannon.)  



---



## Phase 4: Squad & AI

21. [x] Implement simple enemy AI (patrol, chase, attack) (grunt prototype with chase + melee lunge).  

22. [x] Add squadmate system with recruitable NPCs. (Three allied operatives follow commands with Attack/Defend/Hold/Flank behaviors.)  

23. [x] Build squad command system (attack, defend, flank, hold). (Command wheel + hotkeys drive squad AI behaviors with live HUD status.)  

24. [x] Optional: Implement peer-to-peer multiplayer (WebRTC, no backend). (Manual WebRTC handshake with state sync and remote avatar rendering.)  

25. [x] Scale AI system to handle up to 100 participants. (Enemy spawner auto-fills waves to 100 with distance culling and optimized attack checks.)  



---



## Phase 5: Environments

<<<<<<< Updated upstream
26. [x] Create first test map (urban environment). (Neo District layout with multi-tier streets, rooftops, and skyline d cor.)  
=======
26. [x] Create first test map (urban environment). (Neo District layout with multi-tier streets, rooftops, and skyline dï¿½cor.)  
>>>>>>> Stashed changes

27. [x] Add destructible props (walls, cars, barrels). (Neo District now scatters destructible barriers, cars, and volatile barrel clusters with shared damage logic, chain explosions, and rubble visuals.)  

28. [x] Implement explosion physics and debris effects. (Shared explosion impulse module now drives radial damage/knockback and spawns debris sprays on grenades, chain blasts, and destructible ruptures.)  

29. [x] Add dynamic lighting system (flashlights, explosions, tracer fire). (Flashlight cones, tracer pulses, and explosion bursts now drive additive lighting overlay.)

30. [x] Add interactive objects (push crates, kick barrels, traps). (Movable crates, rollable barrels, and shock-floor traps now react to pushes, melee hits, and proximity triggers.)

31. [x] Expand to multiple environments (jungle, desert, sci-fi). (Environment presets now swap terrain, decor, spawns, and ambient lighting with Alt+9/Alt+0 cycling.)

32. [x] Implement player-built structures system (basic building framework). (B toggles build mode, ,/. cycle blueprints, and placements persist per environment with ambient structure lighting.)

33. [x] Add defensive towers, barricades, and traps. (Player deployment now includes barricades, watchtower turrets, shield emitters, and shock traps with ambient lighting and damage logic.)

34. [x] Add resource system for building (materials, salvage, drops). (Destructibles and supply drops now spill salvage pickups, materials auto-track in build HUD, and shield/turret defenses feed off the new resource pool.)

35. [x] Integrate build system into Survival Mode (base fortifications). (Survival waves now drip-feed materials, salvage pickups, and auto-trigger wave progression for fortifying between rounds.)  



---



## Phase 6: Aiming & Animation Overhaul

<<<<<<< Updated upstream
36. [ ] Implement universal 360-degree aiming system across players, squadmates, NPCs, and mounted entities with synchronized targeting states.  

37. [ ] Map player aiming to mouse position (with controller fallback) including smoothing, dead zones, and sensitivity tuning.  

38. [ ] Render equipped weapons in character hands with direction-aware flipping, depth layering, and visible weapon swapping.  

39. [ ] Bind arm rigs to aim direction using IK/blend trees so limbs hold weapons correctly while aiming left or right.  

40. [ ] Expand locomotion animations (idle, walk, run, crouch) to adapt leg poses to movement speed and direction changes.  

41. [ ] Create attack-specific arm animation sets (fists, melee, ranged) that blend with aim direction and combo timing.  
=======
36. [x] Implement universal 360-degree aiming system across players, squadmates, NPCs, and mounted entities with synchronized targeting states.  

37. [x] Map player aiming to mouse position (with controller fallback) including smoothing, dead zones, and sensitivity tuning.  

38. [x] Render equipped weapons in character hands with direction-aware flipping, depth layering, and visible weapon swapping.  

39. [x] Bind arm rigs to aim direction using IK/blend trees so limbs hold weapons correctly while aiming left or right.  

40. [x] Expand locomotion animations (idle, walk, run, crouch) to adapt leg poses to movement speed and direction changes.  

41. [x] Create attack-specific arm animation sets (fists, melee, ranged) that blend with aim direction and combo timing.  
>>>>>>> Stashed changes



---



## Phase 7: Game Modes

<<<<<<< Updated upstream
42. [ ] Implement Story Campaign mode (basic missions).  

43. [ ] Build Survival Mode (enemy waves).  

44. [ ] Build Sandbox Skirmish mode with full arsenal.  

45. [ ] Build Massive Co-Op mode (up to 100 players/NPCs).  
=======
42. [x] Implement Story Campaign mode (basic missions). (Three-mission story flow with briefing, objectives, rewards, and HUD integration.)  

43. [x] Build Survival Mode (enemy waves). (Scaled waves, survival rewards, defeat handling, and HUD scoreboard with keybind toggles.)  

44. [x] Build Sandbox Skirmish mode with full arsenal. (Toggleable K key skirmish with full arsenal, infinite ammo, wave spawns, and HUD scoreboard.)  

45. [x] Build Massive Co-Op mode (up to 100 players/NPCs). (F9 toggles simulated 100-player coop swarm with remote player pooling, stats, and HUD telemetry.)  
>>>>>>> Stashed changes



---



<<<<<<< Updated upstream
## Phase 8: UI & Frontend Flow

46. [ ] Design and implement the main menu UI (branding, background, primary navigation).  

47. [ ] Build Create Game / mode selection flow with campaign, survival, sandbox, and co-op configuration panels.  

48. [ ] Wire up lobby/pre-game setup screens (loadouts, squad slots, difficulty) with local persistence.  

49. [ ] Implement in-game clickable UI elements (context prompts, inventory, interaction overlays) supporting mouse and touch input.  

50. [ ] Refresh in-game HUD and menus to reflect new aiming systems, weapon states, and contextual prompts.  



---



## Phase 9: Replayability & Polish

51. [ ] Create custom loadout system.  

52. [ ] Add cosmetic customization (helmets, armor, jetpacks).  

53. [ ] Add scenario editor for player-made maps.  

54. [ ] Optimize performance for large-scale battles.  

55. [ ] Balance all weapons, gadgets, and vehicles.  

56. [ ] Add sound effects and soundtrack.  

57. [ ] Add particle FX (explosions, smoke, blood, sparks). (Event-driven muzzle, shield, and throwable bursts prototyped via placeholder particle/tonal system.)

58. [ ] Improve UI/UX (menus, HUD, inventory).  
=======
## Phase 8: Replayability & Polish

46. [ ] Create custom loadout system.  

47. [ ] Add cosmetic customization (helmets, armor, jetpacks).  

48. [ ] Add scenario editor for player-made maps.  

49. [ ] Optimize performance for large-scale battles.  

50. [ ] Balance all weapons, gadgets, and vehicles.  

51. [ ] Add sound effects and soundtrack.  

52. [ ] Add particle FX (explosions, smoke, blood, sparks). (Event-driven muzzle, shield, and throwable bursts prototyped via placeholder particle/tonal system.)

53. [ ] Improve UI/UX (menus, HUD, inventory).  
>>>>>>> Stashed changes



---



<<<<<<< Updated upstream
=======
## Phase 9: UI & Frontend Flow

54. [ ] Design and implement the main menu UI (branding, background, primary navigation).  

55. [ ] Create Game / mode selection flow with campaign, survival, sandbox, and co-op configuration panels.  

56. [ ] Wire up lobby/pre-game setup screens (loadouts, squad slots, difficulty) with local persistence.  

57. [ ] Implement in-game clickable UI elements (context prompts, inventory, interaction overlays, build menu) supporting mouse and touch input.  

58. [ ] Refresh in-game HUD and menus to reflect new aiming systems, weapon states, and contextual prompts.  



---


>>>>>>> Stashed changes
## Phase 10: Testing & Release

59. [ ] Conduct internal alpha testing.  

60. [ ] Run closed beta with limited players.  

61. [ ] Collect feedback and fix critical bugs.  

62. [ ] Optimize performance for large-scale battles.  

63. [ ] Prepare promotional materials (trailer, screenshots).  

64. [ ] Release v1.0 of Stickman Warfare as a **single self-contained HTML file**.  



---



## Long-Term Goals (Post-Release)

65. [ ] Add new weapons and gadgets via updates.  

66. [ ] Add new vehicles (experimental/sci-fi).  

67. [ ] Expand campaign with new missions.  

68. [ ] Support modding tools for the community.  

69. [ ] Develop esports/competitive mode.  















<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes


























